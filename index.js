const fs = require("fs");
const path = require("path");
const genericNames = require("generic-names");
const postcssCssModules = require("postcss-icss-selectors");
const postcss = require("postcss");

const comma = `
    , `;
const closer = `
    }`;
const defaultArgs = {
  cssModules: {
    enabled: true,
    scopePattern: "[name]__[local]---[hash:base64:5]"
  },
  dir: "",
  moduleName: "styles"
};

function addSelector(selectors, acc, cur, idx, arr) {
  let result = acc + `${cur} = "${selectors[cur]}"`;
  if (idx + 1 < arr.length) {
    result = result + comma;
  } else {
    result = result + closer;
  }
  return result;
}

function getSelectors(root, messages) {
  let selectors = {};
  const cssModules = messages.filter(
    msg => msg.plugin === "postcss-icss-selectors"
  );
  if (cssModules.length) {
    selectors = cssModules.reduce((acc, cur) => {
      const { name, value } = cur;
      return Object.assign({}, acc, { [name]: value });
    }, {});
  } else {
    root.walkRules(rule => {
      const { selector } = rule;
      if (selector.indexOf(".") === 0) {
        const value = selector.slice(1);
        selectors[value] = value;
      }
    });
  }

  return selectors;
}

function opener(fileName, moduleName) {
  return `-- Elm CSS Module, generated by postcss-elm-modules
module ${fileName} exposing (${moduleName})

${moduleName} =
    { `;
}

function postcssElm(args, root) {
  const { dir, cssModules } = args;
  let { moduleName } = args;
  runPostCss(cssModules).process(root.clone()).then(result => {
    let root = result;
    result.root.walkAtRules("elmModule", rule => {
      const { params } = rule;
      if (params.length) {
        moduleName = params;
        root = rule.parent;
      }
    });
    const selectors = getSelectors(root, result.messages);
    const fileName = moduleName.charAt(0).toUpperCase() + moduleName.slice(1);
    const elmStyles = Object.keys(selectors).reduce(
      addSelector.bind(null, selectors),
      opener(fileName, moduleName)
    );
    fs.writeFileSync(`${path.join(dir, fileName)}.elm`, elmStyles);
  });
}

function runPostCss(cssModules) {
  const { enabled, scopePattern } = cssModules;
  return postcss(
    enabled
      ? [
          postcssCssModules({
            generateScopedName: genericNames(scopePattern)
          })
        ]
      : []
  );
}

module.exports = postcss.plugin("postcss-elm-modules", function(options) {
  const args = Object.assign({}, defaultArgs, options);
  return postcssElm.bind(null, args);
});
