const fs = require('fs')
const path = require('path')
const genericNames = require('generic-names')
const postcssCssModules = require('postcss-icss-selectors')
const postcss = require('postcss')

const comma = `
    , `
const closer = `
    }`

/**
 * Add a selector to an Elm module. Reducer function.
 *
 * @param {Object} selectors An object of selector pairs.
 * @param {string} acc Accumulator string.
 * @param {string} key Current key.
 * @param {Number} idx Index of the array being reduced.
 * @param {array} arr The array being reduced.
 * @return {string} The accumulated string.
 */
function addSelector (selectors, acc, key, idx, arr) {
  let result = acc + `${key} = "${selectors[key]}"`
  if (idx + 1 < arr.length) {
    result = result + comma
  } else {
    result = result + closer
  }
  return result
}

/**
 * Update the module name and PostCSS root if an `elmModule` atRule is present.
 *
 * @param {Object} oldRoot The incoming root object.
 * @param {string} oldModuleName The incoming module name.
 * @return {Object} Object containing the module name and root object.
 */
function applyModuleArgs (oldRoot, oldModuleName) {
  let moduleName = oldModuleName
  let root = oldRoot
  oldRoot.walkAtRules('elmModule', rule => {
    const { params } = rule
    if (params.length) {
      moduleName = params
      root = rule.parent
    }
  })
  return { moduleName, root }
}

/**
 * Build an Elm module from an object of selector pairs.
 *
 * @param {Object} selectors Selector key/value pairs.
 * @param {string} fileName The file name.
 * @param {string} moduleName The module name.
 * @return {string} The transpiled Elm module.
 */
function buildElmModule (selectors, fileName, moduleName) {
  return Object.keys(selectors).reduce(
    addSelector.bind(null, selectors),
    opener(fileName, moduleName)
  )
}

/**
 * Get the selector key/value pairs from a PostCSS root.
 *
 * @param {Object} root PostCSS root.
 * @param {array} messages Messages passed from a PostCSS plugin.
 * @return {Object} Key/value pairs of selectors.
 */
function getSelectors (root, messages = []) {
  let selectors = {}
  const cssModules = messages.filter(
    msg => msg.plugin === 'postcss-icss-selectors'
  )
  if (cssModules.length) {
    selectors = cssModules.reduce((acc, cur) => {
      const { name, value } = cur
      return Object.assign({}, acc, { [name]: value })
    }, {})
  } else {
    root.walkRules(rule => {
      const { selector } = rule
      if (selector.indexOf('.') === 0) {
        const value = selector.slice(1)
        selectors[value] = value
      }
    })
  }
  return selectors
}

/**
 * Generate the proper opening string for an Elm module.
 *
 * @param {string} fileName The file name.
 * @param {string} moduleName The module name.
 * @return {string} The opening string.
 */
function opener (fileName, moduleName) {
  return `-- Elm CSS Module, generated by postcss-elm-modules
module ${fileName} exposing (${moduleName})


${moduleName} =
    { `
}

function postcssElm (args, root) {
  const { dir, cssModules } = args
  return new Promise(resolve => {
    runPostCss(cssModules).process(root.clone()).then(result => {
      const { moduleName, root } = applyModuleArgs(result.root, args.moduleName)
      const selectors = getSelectors(root, result.messages)
      const fileName = moduleName.charAt(0).toUpperCase() + moduleName.slice(1)
      const elmModule = buildElmModule(selectors, fileName, moduleName)
      resolve(fs.writeFileSync(`${path.join(dir, fileName)}.elm`, elmModule))
    })
  })
}

/**
 * Run PostCSS with CSS modules enabled or diabled.
 *
 * @param {Object} cssModules Args for using CSS modules.
 * @return {void} Function call.
 */
function runPostCss (cssModules = {}) {
  const { enabled, scopePattern } = cssModules
  return postcss(
    enabled
      ? [
        postcssCssModules({
          generateScopedName: genericNames(scopePattern)
        })
      ]
      : []
  )
}

module.exports = {
  addSelector,
  applyModuleArgs,
  buildElmModule,
  comma,
  closer,
  getSelectors,
  opener,
  postcssElm,
  runPostCss
}
